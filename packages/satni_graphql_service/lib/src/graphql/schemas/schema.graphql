schema {
  query: Query
}

type ConceptType {
  collections: [String]
  definition: String
  explanation: String
  id: ID
  language: String!
  name: String!
  terms: [TermType]!
}

type DictEntryType {
  dictName: String!
  id: ID
  srcLang: String!
  targetLang: String!
  translationGroups: [TranslationGroupType]!
  lookupLemmas: [LemmaType]!
}

type ExampleGroupType {
  example: String!
  translation: String!
}

type GeneratorAnalysis {
  wordform: String!
  weight: Float!
}

type GeneratorResultType {
  paradigmTemplate: String!
  analyses: [GeneratorAnalysis]
}

type LemmaType {
  country: String
  dialect: String
  id: ID
  language: String!
  lemma: String!
  pos: String
  presentationLemma: String!
  spuriousAttributes: [SpuriousAttributeType]
}

type LemmatiserAnalysis {
  analysis: String!
  weight: Float!
}

type LemmatiserResultType {
  language: String!
  wordforms: [String]!
  analyses: [LemmatiserAnalysis]!
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  generated(origform: String!, language: String!, paradigmTemplates: [String]!): [GeneratorResultType]
  conceptList(exact: String!, srcLangs: [String]!, targetLangs: [String]!): [ConceptType]
  lemmatised(lookupString: String!): [LemmatiserResultType]
  dictEntryList(exact: String!, srcLangs: [String]!, targetLangs: [String]!, wantedDicts: [String]!): [DictEntryType]
  stemList(search: String!, mode: String!, srcLangs: [String]!, targetLangs: [String]!, wantedDicts: [String]!, before: String, after: String, first: Int, last: Int, id: ID, searchStem: String, srclang: String, stem: String, targetlangs: String): StemTypeConnection
  hasStem(exact: String!, srcLang: String!, targetLangs: [String]!, wantedDicts: [String]!): [StemType]
}

type RestrictionType {
  attributes: String
  restriction: String
}

type SpuriousAttributeType {
  id: ID
  name: String!
  value: String!
}

type StemHitsType implements Node {
  dicthits: Int!
  dictname: String!
  id: ID!
}

type StemHitsTypeConnection {
  pageInfo: PageInfo!
  edges: [StemHitsTypeEdge]!
}

type StemHitsTypeEdge {
  node: StemHitsType
  cursor: String!
}

type StemType implements Node {
  dicts(before: String, after: String, first: Int, last: Int, dicthits: Int, dictname: String, id: ID): StemHitsTypeConnection
  id: ID!
  searchStem: String!
  srclang: String!
  stem: String!
  targetlangs: [String]
}

type StemTypeConnection {
  pageInfo: PageInfo!
  edges: [StemTypeEdge]!
  totalCount: Int
}

type StemTypeEdge {
  node: StemType
  cursor: String!
}

type TermType {
  expression: LemmaType
  note: String
  sanctioned: Boolean
  source: String
  status: String
}

type TranslationGroupType {
  exampleGroups: [ExampleGroupType]
  restriction: RestrictionType
  translationLemmas: [LemmaType]
}
